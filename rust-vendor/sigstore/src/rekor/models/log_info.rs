/*
 * Rekor
 *
 * Rekor is a cryptographically secure, immutable transparency log for signed software releases.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::rekor::TreeSize;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, Default, Serialize, Deserialize)]
pub struct LogInfo {
    /// The current hash value stored at the root of the merkle tree
    #[serde(rename = "rootHash")]
    pub root_hash: String,
    /// The current number of nodes in the merkle tree
    #[serde(rename = "treeSize")]
    pub tree_size: TreeSize,
    /// The current signed tree head
    #[serde(rename = "signedTreeHead")]
    pub signed_tree_head: String,
    /// The current treeID
    #[serde(rename = "treeID")]
    pub tree_id: Option<String>,
    #[serde(rename = "inactiveShards", skip_serializing_if = "Option::is_none")]
    pub inactive_shards: Option<Vec<crate::rekor::models::InactiveShardLogInfo>>,
}

impl LogInfo {
    pub fn new(root_hash: String, tree_size: TreeSize, signed_tree_head: String) -> LogInfo {
        LogInfo {
            root_hash,
            tree_size,
            signed_tree_head,
            tree_id: None,
            inactive_shards: None,
        }
    }
}
